// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);
		Mux16(a=ALUout,b=instruction,sel=Ainstruction,out=newA);
		ARegister(in=newA, load=loadA,out=regA);
		
		//////////////////////////////////////
		// ALU input decoding
		Mux16(a=regA, b=inM, sel=instruction[12], out=AorM);

		ALU(x=Dreg,y=AorM,
			zx=instruction[11],
			nx=instruction[10],
			zy=instruction[9],
			ny=instruction[8],
			f=instruction[7],
			no=instruction[6],
			
			out=ALUout,
			zr=zr,
			ng=ng);
		
		And16(a[0..15]=true,b=ALUout,out=outM);
		
		///////////////////////////////////////////
		// dest instruction and storage
		And(a=instruction[3],b=true,out=prewriteM);
		And(a=prewriteM, b=instruction[15],out=writeM);
		
		And(a=instruction[4],b=true,out=prewriteD);
		And(a=prewriteD, b=instruction[15],out=writeD);
		And(a=instruction[5],b=true,out=writeA);
		
		Or(a=writeA,b=Ainstruction,out=loadA);
		
		DRegister(in=ALUout,load=writeD,out=Dreg);
		
		////////////////////////////////////////////
		//jump instructions and pc		
		Or(a=zr,b=ng,out=notpos);
		Not(in=notpos,out=pos);
		Not(in=zr,out=notzr);
		
		And(a=instruction[0],b=pos,out=posjump);
		And(a=instruction[1],b=zr,out=zrjump);
		And(a=instruction[2],b=ng,out=ngjump);
		
		Or(a=posjump,b=zrjump,out=pzjump);
		Or(a=ngjump,b=pzjump,out=jumpconditionsmet);
		And(a=instruction[15],b=jumpconditionsmet,out=jump);
		Not(in=jump,out=inc);
		PC(in=regA, load=jump, inc=inc, reset=reset, out[0..14]=pc);
		//////////////////////////////////////
		
		And16(a[0..15]=true,b=regA,out[0..14]=addressM);
}
