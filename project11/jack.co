# Jack parser
# Steven Ruppert
fs = require \fs

symbol = /[\{\}\(\)\[\]\.,;\+\-\*\/&\|<>=~]/
keywords = //^(?:class|constructor|function|method|field|static|var
	|int|char|boolean|void|true|false|null|this|let|do|if|else|while|return)$//

digit = /\d/
string_literal = '"'

identifier_start = /[A-Za-z_]/
identifier = /[\w_]/

comment_start = \//
multiline_comment_start = \/*
comment_end = \*/

escape = -> switch it
	case \< then '&lt;'
	case \> then '&gt;'
	case \" then '&quot;'
	case \& then '&amp;'
	default it

class Token
	(@type, @text, @src, @line, @column) ->
	xml: (indent) ->
		"""#{' ' * indent}<#{@type}>#{escape @text}</#{@type}>"""

lex = ({name,input}) ->
	lines = input.split /\n/ .map -> it.replace /\t/ ' ' # make tabs 1 char wide
	line = 0 # line number
	line_start = 0 # start position in characters of current line
	
	error = -> 
		src = lines[line]
		column = i - line_start
		indicator = \- * (column - 1) + \^ # tabs are 1 char wide so it lines up
		throw new Error "#name: #it on line #{line+1}, column #{column+1}: \n#src\n#indicator"

	tokens = []

	push = (type, text) -> tokens.push new Token type, text, lines[line], line, i - line_start

	len = input.length
	i = 0
	while i < len
		c = input[i]
		if c is \\n
			++line
			line_start = i
			++i
		else if /\s/.test c # consume whitespace
			++i
		else if input.substr(i, 2) is comment_start
			++i while i < len and input[i] is not \\n # consume until newline
		else if input.substr(i, 2) is multiline_comment_start 
			do
				++i 
			while i < len and input.substr(i, 2) is not comment_end
			i += 2 # consume comment end
		else if symbol.test c
			push \symbol c
			++i
		else if digit.test c
			integer = c
			start = i
			while ++i < len 
				c = input[i]
				break if symbol.test c
				error "invalid number" unless digit.test c
				integer += c 
			tokens.push new Token \integerConstant integer, lines[line], line, start - line_start
		else if c is string_literal
			string = ''
			start = i
			while ++i 
				error "unterminated string literal" if i > len
				c = input[i]
				break if c is string_literal # end string
				error "invalid newline in string literal" if /[\n\r]/.test c
				string += c
			tokens.push new Token \stringConstant, string, lines[line], line, start - line_start
			++i # discard ending quote
		else if identifier_start.test c
			ident = c
			start = i
			ident += c while ++i < len and identifier.test c = input[i]
			tokens.push new Token (if keywords.test ident then \keyword else \identifier), ident, lines[line], line, start - line_start
		else
			error "invalid syntax #c"
	
	return tokens

# compilation units
class Class
	(@name) ->
		# use Object.create instead of {} because {} will be encumbered with
		# Object.prototype, so lookups like 'contructor' or 'toString' will
		# actually refer to the native JS functions
		# having a null prototype means all hash lookups are for the object only
		@vars = Object.create null

		@subroutines = Object.create null

	# symbol table managing functions
	
	static: (type, name) ->
		if @var[name]
			throw new Error """class #{@name} has a duplicate class variable "#name"!"""
		@var[name] = {class_type: \static, type}

	field: (type, name) ->
		if @var[name]
			throw new Error """class #{@name} has a duplicate class variable "#name"!"""
		@var[name] = {class_type: \field, type}

	# syntax tree-building functions
	
	constructor: (return_type, name, params) ->
		if @subroutines.constructor
			throw new Error """class #{@name} has multiple construtors declared!"""
		@subroutines.constructor = new Constructor this, params

	function: (return_type, name, params) ->
		if @subroutines[name]
			throw new Error """function #{@name}.#name is already defined!"""
		@subroutines[name] = new JackFunction this, return_type, name, params
	
	method: (return_type, name, params) ->
		if @subroutines[name]
			throw new Error """method #{@name}.#name is already defined!"""
		@subroutines[name] = new Method this, return_type, name, params

	compile: -> 
		"""
		Class #{@name}
		vars:
		#{("#{variable.class_type} #name: #{variable.type}" for name,variable in @vars).join \\n}
		
		subroutines:
		#{(sub.compile! for sub in @subroutines).join \\n}
		"""

class Subroutine
	(@class, @return_type, @name, @params) ->
		@locals = Object.create null
	
	local: (type, name) ->
		if @locals[name]
			throw new Error """method #{@class.name}.#name has a duplicate local variable "name"!"""
		@locals[name] = type

	compile: (type) ->
		"""
		#type #{@name} :
		locals:
		#{("#name: #{variable.type}" for name,variable in @locals).join \\n}
		statements:
		#{(@statement.compile! for statement of @statements).join \\n}
		"""

class Constructor extends Subroutine
	-> super ...
	compile: -> super \constructor

class JackFunction extends Subroutine
	-> super ...
	compile: -> super \function

class Method extends Subroutine
	-> super ...
	compile: -> super \method

class LetStatement
	(@subroutine, @variable, @array_idx, @value) ->
	compile: ->
		"""
		let #{@variable}#{if @array_idx then "[#that]" else ''} = #{@value.compile!}
		"""

class IfStatement
	(@subroutine, @test, @body, @else_body) ->
	compile: ->
		"""
		if( #{@test.compile!} ) {
		
		#{(@statement.compile! for statement of @body).join \\n}

		#{if @else_body then "}else {\n#{(@statement.compile! for statment of @else_body).join \\n}\n}" else '}'}
		"""

class WhileStatement
	(@subroutine, @test, @body) ->
	compile: ->
		"""
		while( #{@test.compile!} ) {
		
		#{(@statement.compile! for statement of @body).join \\n}

		}
		"""

class DoStatement
	(@subroutine, @call) ->
	compile: ->
		"""do #{@call.compile!}"""

class ReturnStatement
	(@subroutine, @expr) ->
	compile: ->
		"""return #{if @expr then that.compile! else ''}"""

class Expression
	(@subroutine, @left, @op, @right) ->
	compile: ->
		"""#{@left.compile!} #{if @op then that} #{if @right then @right.compile! else ''}"""

class IntegerConstant
	(@value) ->
	compile: -> @value.toString!

class KeywordConstant
	(@keyword) ->
	compile: -> @keyword.toString!

class ArrayReference
	(@subroutine, @variable, @array_idx) ->
	compile: ->
		"""#{@variable}[#{@array_idx.compile!}]"""

class VariableReference
	(@subroutine, @variable) ->
	compile: -> @variable
	
class SubroutineCall
	(@subroutine, @scope_name, @method_name, @args) ->
	compile: ->
		"""#{if @scope_name then "#that." else ''}#{method_name}( #{if @args then @args.map(-> it.compile!).join(\\n) else ''} )"""

class Unary
	(@op, @term) ->
	compile: ->
		"""#{@op}#{@term}"""

parser =
	parse: (@name, @tokens) ->
		@className = @name.replace /.jack$/ '' # strip extension from filename

		# create the root node
		@class = new Class @className

		@push \keyword \class
		# check class name against filename, like official compiler
		unless ( @push \identifier ) is @className
			throw new Error "the file #{@name} can only declare the class #{@className}!"

		@push \symbol \{
		while @peek.text is \static or @peek.text is \field
			@classVarDec!
		while @peek.text is \constructor or @peek.text is \function or @peek.text is \method
			@subroutineDec!
		@push \symbol \}

		return @class 
	
	# helper functions

	error: ->
		{src, line, column} = @token
		src.=replace /\t/ ' ' # compact tabs to one column
		indicator = \- * (column - 1) + \^ 
		throw new Error do
			"""
			#name: Unexpected #{@token.type} on line #{line+1}, column #{column+1}:
			#src
			#indicator
			"""

	next:~ -> @token = @tokens.shift! or throw new Error "unexpected end of file!"
	peek:~ -> @tokens.0 or { text: \EOF, type: \EOF } # handle missing EOF token

	# check and consume next token
	push: (type, text) ->
		t = @next
		text = [text] if text and not Array.isArray text
		# if type is correct and the matching text exists and matches
		unless t.type is type and (not text or ( text and text.indexOf( t.text ) is not -1 ) )
			@error!

		# note that all the rich data about the original token (line number etc) is
		# pretty much destroyed here, since the syntax tree is handled internally
		# by the compilation unit classes instead of by the XML tree like the
		# previous version of the parser. OH WELL

		return t.text # allows push to return the identifier
	
	# parsing functions
	
	classVarDec: !->
		class_var_type = @push \keyword <[static field]>
		var_type = @type!
		@push \identifier
		while @peek.text is not \;
			@push \symbol \,
			# add variable to class
			@class[class_var_type] var_type, @push \identifier
		@push \symbol \;
	
	type: ->
		if @peek.type is \identifier
			@push \identifier
		else
			@push \keyword <[int char boolean]>

	subroutineDec: !->
		type = @push \keyword <[constructor function method]>
		return_type = if @peek.text is \void
			@push \keyword \void
		else
			@type!
		name = @push \identifier

		@push \symbol \(
		params = @parameterList!
		@push \symbol \)

		# add subroutine to class, and set current routine
		@subroutine = @class[type] return_type, name, params

		# process body in context of current subroutine
		@subroutineBody!
		
	parameterList: ->
		params = []
		while @peek.text is not \)
			 params.push @type!, @push \identifier

			unless @peek.text is \)
				@push \symbol \,

		return params

	subroutineBody: ->
		@push \symbol \{
		while @peek.text is \var
			@varDec!
		@subroutine.statments = @statements!
		@push \symbol \}
	
	varDec: ->
		@push \keyword \var
		type = @type!
		name = @push \identifier
		@subroutine.local type, name

		while @peek.text is not \;
			@push \symbol \,
			name = @push \identifier
			@subroutine.local type, name

		@push \symbol \;

	statements: ->
		unless @peek.text is \}
			while @peek.type is \keyword
				switch @peek.text
					case \let then @letStatement!
					case \if then @ifStatement!
					case \while then @whileStatement!
					case \do then @doStatement!
					case \return then @returnStatement!
					default @error!

	letStatement: ->
		@push \keyword \let
		name = @push \identifier
		if @peek.text is \[
			@push \symbol \[
			array_idx = @expression!
			@push \symbol \]
		@push \symbol \=
		value = @expression!
		@push \symbol \;

		return new LetStatment @subroutine, name, array_idx, value
	
	ifStatement: ->
		@push \keyword \if
		@push \symbol \(
		test = @expression!
		@push \symbol \)
		@push \symbol \{
		body = @statements!
		@push \symbol \}
		if @peek.text is \else
			@push \keyword \else
			@push \symbol \{
			else_body = @statements!
			@push \symbol \}

		return new IfStatement @subroutine, test, body, else_body

	whileStatement: ->
		@push \keyword \while
		@push \symbol \(
		test = @expression!
		@push \symbol \)
		@push \symbol \{
		body = @statements!
		@push \symbol \}
		
		return new WhileStatement @subroutine, test, body

	doStatement: ->
		@push \keyword \do
		call = @subroutineCall!
		@push \symbol \;

		return new DoStatement @subroutine, call

	returnStatement: ->
		@push \keyword \return
		unless @peek.text is \;
			expr = @expression!
		@push \symbol \;

		return new ReturnStatment @subroutine, expr

	expression: ->
		left = @term!
		if <[+ - * / & | < > =]>.indexOf(@peek.text) is not -1
			op = @push \symbol
			right = @term!

		return new Expression @subroutine, left, op, right

	term: ->
		if @peek.type is \integerConstant
			return IntegerConstant @push \integerConstant
		else if @peek.type is \stringConstant
			return new StringConstant @push \stringConstant
		else if <[true false null this]>.indexOf(@peek.text) is not -1 #keywordConstant
			return new KeywordConstant @push \keyword
		else if @peek.text is \(
			@push \symbol \(
			expr = @expression!
			@push \symbol \)
			return expr
		else if @peek.type is \identifier
			peek2 = @tokens.1?text
			if peek2 is \[ # varName[expression]
				name = @push \identifier
				@push \symbol \[
				array_idx = @expression!
				@push \symbol \]
				return new ArrayReference @subroutine, name, array_idx
			else if peek2 is \( or peek2 is \. # method(explist) or object.method
				return @subroutineCall!
			else # just varName
				return new VariableReference @subroutine, @push \identifier
		else #unary
			op = @push \symbol <[~ -]>
			term = @term!
			return new Unary op, term

	subroutineCall: ->
		scope_name = @push \identifier # subname or classname or varname
		if @peek.text is \. # method call
			@push \symbol \. 
			method_name = @push \identifier #method name
		else # internal class call
			method_name = scope_name
			scope_name = void
	
		@push \symbol \(
		args = @expressionList!
		@push \symbol \)

		return new SubroutineCall @subroutine, scope_name, method_name, args

	expressionList: ->
		while @peek.text is not \)
			expr = @expression!
			unless @peek.text is \)
				@push \symbol \,

			expr # yield expression

# simple wrapper around parse, lex, and compile
compile = -> parser.parse it.name, lex it .compile!

die = ->
	console.error it
	process.exit 1

infile =
	process.argv[2]?replace /\\/g \/ or # convert windows paths
	die "Usage: jack.js <infile.jack> or <directory containing .jack files>"
if fs.statSync infile .isDirectory()
	for file of fs.readdirSync infile
		if /\.jack$/.test file
			fs.writeFileSync do
				"#infile/#{file.replace /\.jack$/ \.vm}"
				compile name: file, input: fs.readFileSync "#infile/#file", \utf8
else
	fs.writeFileSync do
		infile.replace /\.jack$/ \.vm
		compile name: infile, input: fs.readFileSync infile, \utf8
