# Jack parser
# Steven Ruppert
fs = require \fs

# filters all undefined values and joins them by newlines
lines = -> Array::filter.call( arguments, -> it? ).join \\n

symbol = /[\{\}\(\)\[\]\.,;\+\-\*\/&\|<>=~]/
keywords = //^(?:class|constructor|function|method|field|static|var
	|int|char|boolean|void|true|false|null|this|let|do|if|else|while|return)$//

digit = /\d/
string_literal = '"'

identifier_start = /[A-Za-z_]/
identifier = /[\w_]/

comment_start = \//
multiline_comment_start = \/*
comment_end = \*/

class Token
	(@type, @text, @src, @line, @column) ->

lex = ({name,input}) ->
	lines = input.split /\n/ .map -> it.replace /\t/ ' ' # make tabs 1 char wide
	line = 0 # line number
	line_start = 0 # start position in characters of current line
	
	error = -> 
		src = lines[line]
		column = i - line_start
		indicator = \- * (column - 1) + \^ # tabs are 1 char wide so it lines up
		throw new Error "#name: #it on line #{line+1}, column #{column+1}: \n#src\n#indicator"

	tokens = []

	push = (type, text) -> tokens.push new Token type, text, lines[line], line, i - line_start

	len = input.length
	i = 0
	while i < len
		c = input[i]
		if c is \\n
			++line
			line_start = i
			++i
		else if /\s/.test c # consume whitespace
			++i
		else if input.substr(i, 2) is comment_start
			++i while i < len and input[i] is not \\n # consume until newline
		else if input.substr(i, 2) is multiline_comment_start 
			do
				++i
				if input[i] is \\n
					++line
					line_start = i
			while i < len and input.substr(i, 2) is not comment_end
			i += 2 # consume comment end
		else if symbol.test c
			push \symbol c
			++i
		else if digit.test c
			integer = c
			start = i
			while ++i < len 
				c = input[i]
				break if symbol.test c
				break if c is ' '
				error "invalid number" unless digit.test c
				integer += c 
			tokens.push new Token \integerConstant integer, lines[line], line, start - line_start
		else if c is string_literal
			string = ''
			start = i
			while ++i 
				error "unterminated string literal" if i > len
				c = input[i]
				break if c is string_literal # end string
				error "invalid newline in string literal" if /[\n\r]/.test c
				string += c
			tokens.push new Token \stringConstant, string, lines[line], line, start - line_start
			++i # discard ending quote
		else if identifier_start.test c
			ident = c
			start = i
			ident += c while ++i < len and identifier.test c = input[i]
			tokens.push new Token (if keywords.test ident then \keyword else \identifier), ident, lines[line], line, start - line_start
		else
			error "invalid syntax #c"
	# console.dir tokens.slice(0,150)	
	return tokens

# shortcut to compile all statments in array if it has some
compile_all = -> it.map( -> it.compile! ).join \\n if it.length

# compilation units
class Class
	(@name) ->
		# use Object.create instead of {} because {} will be encumbered with
		# Object.prototype, so lookups like 'contructor' or 'toString' will
		# actually refer to the native JS functions
		# having a null prototype means all hash lookups are for the object only
		@fields = Object.create null
		@statics = Object.create null
		@subroutines = Object.create null

		# indices for class scoped variables
		@static_idx = 0
		@field_idx = 0

	# symbol table managing functions
	
	static: (type, name) ->
		if @statics[name] or @fields[name]
			throw new Error """class #{@name} has a duplicate class variable "#name"!"""
		@statics[name] = {type, idx: @static_idx++ }

	field: (type, name) ->
		if @statics[name] or @fields[name]
			throw new Error """class #{@name} has a duplicate class variable "#name"!"""
		@fields[name] = {type, idx: @field_idx++ }

	# syntax tree-building functions
	
	constructor: (return_type, name, params) ->
		if @subroutines.constructor
			throw new Error """class #{@name} has multiple construtors declared!"""
		@subroutines.constructor = new Constructor this, return_type, name, params

	function: (return_type, name, params) ->
		if @subroutines[name]
			throw new Error """function #{@name}.#name is already defined!"""
		@subroutines[name] = new JackFunction this, return_type, name, params
	
	method: (return_type, name, params) ->
		if @subroutines[name]
			throw new Error """method #{@name}.#name is already defined!"""
		@subroutines[name] = new Method this, return_type, name, params

	compile: -> (sub.compile! for name,sub in @subroutines).join \\n

class Subroutine
	(@class, @return_type, @name) ->
		@locals = Object.create null
		@args = Object.create null

		@args_idx = 0
		@local_idx = 0

		# each conditional increments this for unique labels
		@whiles = 0 
		@ifs = 0

	argument: (type, name) ->
		if @args[name] or @class.statics[name] or @class.fields[name]
			throw new Error """method #{@class.name}.#{@name} has a duplicate argument "#name"!"""
		@args[name] = { type, idx: @args_idx++ }

	local: (type, name) ->
		if @locals[name] or @args[name] or @class.statics[name] or @class.fields[name]
			throw new Error """method #{@class.name}.#{@name} has a duplicate local variable "#name"!"""
		@locals[name] = { type, idx: @local_idx++ }

	compile: -> lines do
		"function #{@class.name}.#{@name} #{Object.keys @locals .length}"
		compile_all @statements

	# generate correct <segment> <idx> for a variable name in this scope
	resolve: ->
		if @args[it]
			"argument #{that.idx}"
		else if @locals[it]
			"local #{that.idx}"
		else if @class.statics[it]
			"static #{that.idx}"
		else
			throw new Error """undefined variable "#name" in method #{@class.name}.#{@name}!"""

	# tries to find variable reference 
	find: -> @args[it] or @locals[it] or @class.statics[it]

class Constructor extends Subroutine
	-> super ...

	compile: -> lines do
		"function #{@class.name}.#{@name} #{Object.keys @locals .length}"
		"push constant #{Object.keys @class.fields .length}"
		"call Memory.alloc 1" # allocate this objects memory
		"pop pointer 0" # set THIS
		compile_all @statements
	
	resolve: ->
		if @class.fields[it]
			"this #{that.idx}"
		else
			super ...
	find: -> @class.fields[it] or super ...

class JackFunction extends Subroutine
	-> super ...
	# no field resolving for static function

class Method extends Subroutine
	-> super ...
	compile: -> lines do
		"function #{@class.name}.#{@name} #{Object.keys @locals .length}"
		'push argument 0'
		'pop pointer 0' # set THIS
		compile_all @statements
	resolve: ->
		if @class.fields[it]
			"this #{that.idx}"
		else
			super ...
	find: -> @class.fields[it] or super ...

class Statement
	-> # constructor is handled by children
	resolve: -> @subroutine.resolve it # shortcut for variable resolution

class LetStatement extends Statement
	(@subroutine, @variable, @array_idx, @value) ->
	compile: ->
		if @array_idx
			lines do
				@array_idx.compile!
				"push #{@resolve @variable}"
				\add # calculate memory location
				@value.compile!
				'pop temp 0' # store return val
				'pop pointer 1' # pointer to THAT
				'push temp 0' # return val
				'pop that 0' # to pointer
		else
			lines do
				@value.compile!
				"pop #{@resolve @variable}"

class IfStatement extends Statement
	(@subroutine, @test, @body, @else_body) ->
	compile: ->
		label = @subroutine.ifs++
		lines do
			@test.compile!
			"if-goto IF_TRUE#label"
			"goto IF_FALSE#label"
			"label IF_TRUE#label"
			compile_all @body
			if @else_body then "goto IF_END#label"
			"label IF_FALSE#label"
			if @else_body then lines do
				compile_all that
				"label IF_END#label"
				

class WhileStatement extends Statement
	(@subroutine, @test, @body) ->
	compile: ->
		label = @subroutine.whiles++ # unique number inside subroutine
		lines do
			"label WHILE_EXP#label"
			@test.compile!
			\not # since if-goto operates on true
			"if-goto WHILE_END#label"
			compile_all @body
			"goto WHILE_EXP#label"
			"label WHILE_END#label"

class DoStatement extends Statement
	(@subroutine, @call) ->
	compile: -> lines do
		@call.compile!
		'pop temp 0' # discard return

class ReturnStatement extends Statement
	(@subroutine, @expr) ->
	compile: ->
		if @subroutine.return_type is \void
			lines do
				'push constant 0'
				\return
		else if @expr
			lines do
				@expr.compile!
				\return
		else 
			\return

class Expression
	(@left, @op, @right) ->
	compile: -> lines do
		@left.compile!
		if @op then lines do
			@right.compile!
			op[ @op ]

	op =
		\- : \sub
		\+ : \add
		\* : 'call Math.multiply 2'
		\/ : 'call Math.divide 2'
		\& : \and
		\| : \or
		\< : \lt
		\> : \gt
		\= : \eq


class IntegerConstant
	(@value) -> 
	compile: -> "push constant #{@value}"

class StringConstant
	(@value) ->
	compile: -> lines do
		"push constant #{@value.length}"
		"call String.new 1"
		(for char of @value
			lines do
				"push constant #{char.charCodeAt 0}"
				"call String.appendChar 2"
		).join \\n

class KeywordConstant
	(@keyword) ->
	compile: -> keyword[ @keyword ]

	keyword =
		true: 'push constant 0\nnot'
		false: 'push constant 0'
		null: 'push constant 0'
		this: 'push pointer 0'

class ArrayReference
	(@subroutine, @variable, @array_idx) ->
	compile: -> lines do
		@array_idx.compile!
		"push #{@subroutine.resolve @variable}"
		\add # calculate memory location
		'pop pointer 1'
		'push that 0'

class VariableReference
	(@subroutine, @variable) ->
	compile: -> "push #{@subroutine.resolve @variable}"
	
class SubroutineCall
	(@subroutine, @scope_name, @method_name, @args) ->
	compile: -> 
		if @subroutine.find @scope_name # try to find variable for method call
			lines do
				"push #{@subroutine.resolve @scope_name}" # THIS reference
				compile_all @args
				"call #{that.type}.#{@method_name} #{@args.length + 1}" # including THIS reference
		else if not @scope_name
			lines do # handle method calls
				'push pointer 0'
				compile_all @args
				"call #{@subroutine.class.name}.#{@method_name} #{@args.length + 1}"
		else
			lines do # vanilla function call
				compile_all @args
				"call #{@scope_name}.#{@method_name} #{@args.length}"

class Unary
	(@op, @term) ->
	compile: -> lines do
		@term.compile!
		ops[@op]
	
	ops = \~ : \not, \- : \neg

parser =
	parse: (@name, @tokens) ->
		@className = @name.replace /.jack$/ '' # strip extension from filename

		# create the root node
		@class = new Class @className

		@push \keyword \class
		# check class name against filename, like official compiler
		unless ( @push \identifier ) is @className
			throw new Error "the file #{@name} can only declare the class #{@className}!"

		@push \symbol \{
		while @peek.text is \static or @peek.text is \field
			@classVarDec!
		while @peek.text is \constructor or @peek.text is \function or @peek.text is \method
			@subroutineDec!
		@push \symbol \}

		return @class 
	
	# helper functions

	error: (type, text) ->
		{src, line, column} = @token
		src.=replace /\t/ ' ' # compact tabs to one column
		indicator = \- * (column - 1) + \^ 
		throw new Error do
			"""
			#{@name}: Expecting #type #{if text then "\"#text\"" else ''}, found #{@token.type} "#{@token.text}" on line #{line+1}, column #{column+1}:
			#src
			#indicator
			"""

	next:~ -> @token = @tokens.shift! or throw new Error "unexpected end of file!"
	peek:~ -> @tokens.0 or { text: \EOF, type: \EOF } # handle missing EOF token

	# check and consume next token
	push: (type, text) ->
		t = @next
		text = [text] if text and not Array.isArray text
		# if type is correct and the matching text exists and matches
		unless t.type is type and (not text or ( text and text.indexOf( t.text ) is not -1 ) )
			@error type, text

		# note that all the rich data about the original token (line number etc) is
		# pretty much destroyed here, since the syntax tree is handled internally
		# by the compilation unit classes instead of by the XML tree like the
		# previous version of the parser. OH WELL

		return t.text # allows push to return the identifier
	
	# parsing functions
	
	classVarDec: !->
		class_var_type = @push \keyword <[static field]>
		var_type = @type!
		@class[class_var_type] var_type, @push \identifier
		while @peek.text is not \;
			@push \symbol \,
			# add variable to class
			@class[class_var_type] var_type, @push \identifier
		@push \symbol \;
	
	type: ->
		if @peek.type is \identifier
			@push \identifier
		else
			@push \keyword <[int char boolean]>

	subroutineDec: !->
		type = @push \keyword <[constructor function method]>
		return_type = if @peek.text is \void
			@push \keyword \void
		else
			@type!
		name = @push \identifier
		
		# add subroutine to class, and set current routine
		@subroutine = @class[type] return_type, name

		@push \symbol \(
		@parameterList!
		@push \symbol \)


		# process body in context of current subroutine
		@subroutineBody!
		
	parameterList: !->
		while @peek.text is not \)
			@subroutine.argument @type!, @push \identifier

			unless @peek.text is \)
				@push \symbol \,


	subroutineBody: !->
		@push \symbol \{
		while @peek.text is \var
			@varDec!
		@subroutine.statements = @statements!
		@push \symbol \}
	
	varDec: !->
		@push \keyword \var
		type = @type!
		name = @push \identifier
		@subroutine.local type, name

		while @peek.text is not \;
			@push \symbol \,
			name = @push \identifier
			@subroutine.local type, name

		@push \symbol \;

	statements: ->
		while @peek.type is \keyword
			switch @peek.text
				case \let then @letStatement!
				case \if then @ifStatement!
				case \while then @whileStatement!
				case \do then @doStatement!
				case \return then @returnStatement!
				default @error!

	letStatement: ->
		@push \keyword \let
		name = @push \identifier
		if @peek.text is \[
			@push \symbol \[
			array_idx = @expression!
			@push \symbol \]
		@push \symbol \=
		value = @expression!
		@push \symbol \;

		return new LetStatement @subroutine, name, array_idx, value
	
	ifStatement: ->
		@push \keyword \if
		@push \symbol \(
		test = @expression!
		@push \symbol \)
		@push \symbol \{
		body = @statements!
		@push \symbol \}
		if @peek.text is \else
			@push \keyword \else
			@push \symbol \{
			else_body = @statements!
			@push \symbol \}

		return new IfStatement @subroutine, test, body, else_body

	whileStatement: ->
		@push \keyword \while
		@push \symbol \(
		test = @expression!
		@push \symbol \)
		@push \symbol \{
		body = @statements!
		@push \symbol \}
		
		return new WhileStatement @subroutine, test, body

	doStatement: ->
		@push \keyword \do
		call = @subroutineCall!
		@push \symbol \;

		return new DoStatement @subroutine, call

	returnStatement: ->
		@push \keyword \return
		unless @peek.text is \;
			expr = @expression!
		@push \symbol \;

		return new ReturnStatement @subroutine, expr

	expression: (left) ->
		left ?= @term! # if it wasn't passed as an argument
		if <[+ - * / & | < > =]>.indexOf(@peek.text) is not -1
			op = @push \symbol
			right = @term!

			# detect continuation, and instead of multiple terms in one expression
			# treat entire right hand side of THIS expression as a nested expression
			# that way every expression only has a left side, and maybe an op and
			# right side (makes writing expression code easier)
			if <[+ - * / & | < > =]>.indexOf(@peek.text) is not -1
				right = @expression right

		return new Expression left, op, right

	term: ->
		if @peek.type is \integerConstant
			return new IntegerConstant @push \integerConstant
		else if @peek.type is \stringConstant
			return new StringConstant @push \stringConstant
		else if <[true false null this]>.indexOf(@peek.text) is not -1 #keywordConstant
			return new KeywordConstant @push \keyword
		else if @peek.text is \(
			@push \symbol \(
			expr = @expression!
			@push \symbol \)
			return expr
		else if @peek.type is \identifier
			peek2 = @tokens.1?text
			if peek2 is \[ # varName[expression]
				name = @push \identifier
				@push \symbol \[
				array_idx = @expression!
				@push \symbol \]
				return new ArrayReference @subroutine, name, array_idx
			else if peek2 is \( or peek2 is \. # method(explist) or object.method
				return @subroutineCall!
			else # just varName
				return new VariableReference @subroutine, @push \identifier
		else #unary
			op = @push \symbol <[~ -]>
			term = @term!
			return new Unary op, term

	subroutineCall: ->
		scope_name = @push \identifier # subname or classname or varname
		if @peek.text is \. # method call
			@push \symbol \. 
			method_name = @push \identifier #method name
		else # internal class call
			method_name = scope_name
			scope_name = void
	
		@push \symbol \(
		args = @expressionList!
		@push \symbol \)

		return new SubroutineCall @subroutine, scope_name, method_name, args

	expressionList: ->
		while @peek.text is not \)
			expr = @expression!
			unless @peek.text is \)
				@push \symbol \,

			expr # yield expression

# simple wrapper around parse, lex, and compile
compile = -> parser.parse it.name, lex it .compile!

die = ->
	console.error it
	process.exit 1

infile =
	process.argv[2]?replace /\\/g \/ or # convert windows paths
	die "Usage: jack.js <infile.jack> or <directory containing .jack files>"
if fs.statSync infile .isDirectory()
	for file of fs.readdirSync infile
		if /\.jack$/.test file
			fs.writeFileSync do
				"#infile/#{file.replace /\.jack$/ \.vm}"
				compile name: file, input: fs.readFileSync "#infile/#file", \utf8
else
	fs.writeFileSync do
		infile.replace /\.jack$/ \.vm
		# name must strip any path info, leaving only filename
		compile name: infile.split(\/)[*-1], input: fs.readFileSync infile, \utf8
